AWSTemplateFormatVersion: '2010-09-09'
Description: Wiregard server

Parameters:
  ImageId:
    Description: Amazon Linux 2
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs

Resources:
  ##########################################################################################
  # VPC
  ##########################################################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  10.192.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  ##########################################################################################
  # Public Subnets
  ##########################################################################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.192.0.0/20
      Tags:
        - Key: Name
          Value: PublicSubnetA

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for VPN instance
      VpcId:  !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 51820
          ToPort: 51820
          CidrIp: 0.0.0.0/0

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  UserDataHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            SubnetId: !Ref PublicSubnetA
            Groups:
              - !Ref SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: on-aws-wireguard
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            MaxPrice: 0.1
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              yum upgrade
              amazon-linux-extras install -y epel
              export rwfile="/etc/yum.repos.d/wireguard.repo"
              export rwurl="https://copr.fedorainfracloud.org/coprs/jdoss/wireguard/repo/epel-7/jdoss-wireguard-epel-7.repo"
              wget --output-document="$rwfile" "$rwurl"
              yum clean all
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region}
              /opt/aws/bin/cfn-signal '${UserDataHandle}'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              wireguard-dkms: []
              wireguard-tools: []
          files:
            /etc/wireguard/wg0.conf:
              content: !Sub |
                [Interface]
                PrivateKey=
                Address=10.0.0.1/24
                SaveConfig=true
                PostUp=iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE;
                PostDown=iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE;
                ListenPort=51820
          commands:
            00_enable_forwarding:
              command: |
                echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
            01_generate_keys:
              command: |
                cd /etc/wireguard
                umask 077
                wg genkey | tee privatekey | wg pubkey > publickey
            02_configure_wireguard:
              command: |
                cd /etc/wireguard
                KEY=`cat privatekey` &&  sed -i "s@PrivateKey=@PrivateKey=$KEY@g" /etc/wireguard/wg0.conf
            03_start:
              command: |
                systemctl enable wg-quick@wg0.service
                systemctl start wg-quick@wg0.service

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: t3.micro
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

  WaitUserData:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Instance
    Properties:
      Handle: !Ref UserDataHandle
      Timeout: 600
